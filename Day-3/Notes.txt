29/03/2025 

AUTO SCALING
==============

- Search EC2 -> instances -> launch template -> create launch template
- give name, provide auto scaling, choose amazon Linux, instance type : t2.micro, no key pair
- create launch template

- ec2 dashboard

-auto scaling grp -> create -> name:athmika-asg
- choose templaye -> next
- select any 3 regions -> next x2 (no change)
- health check : 60s.
- scaling: desired:4, min: 1, max:6 -> nextx3.
- Review : create auto scaling instance.
--- automatically instance is created---

- select instance -> actions -> delete.

=> download Microsoft Authenticator in mobile.
- used for multi factor authentication

=> EC2 website -> top corner -> clck on security credentials.
- assign MFA
- device : mobile
- aurhenticator app -> next -> gen. QR code -> scan it in mobile.
- enter 2 codes -
-> logout
- login -> enter MFA -> go to security credentials -> remove MFA

-----------------------------------------------------------------------------

SIMPLE STORAGE SERVICE

Storage options in AWS:
1. Object storage : s3(simple storage service)
	- s3 is durable and scalable
	- s3 is pay-as-you-go
	- s3 used to upload files/images/movies/pdf files/CSV files/folders etc.
	- s3 called bucket
	- s3 bucket size is 5TB, can create each account 100 buckets.
	- s3 bucket can keep public and also private
=> when you create s3bucket follow the steps(naming rules) :
- global unique
- min 3 characters and max 63 characters
- no special characters/no caps/no spaces.
---------------------------------------
Search s3 -> 
- create bucket
- bucket versioning : enable (to restore)

- select ur bucket -> create folder -> upload images 

-> select 1 image -> copy url -> paste -> access denied (private)

https://athmika22.s3.us-east-1.amazonaws.com/images/dp.png

- convert to public

= bucket -> 
- permissions -> disselect block -> close 
- edit policies -> -> copy arn -> aws policy generator -> policy:s3 ->  * paste arn : arn/* ->


Delete bucket -> empty and delete.
------------------------------------------------
CLI => COMMAND LINE INTERFACE ::

cmd prompt

> aws --version

- download from google (AWS CLI) -> windows -> run as administrator -> msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi

aws-cli/2.25.6 Python/3.12.9 Windows/11 exe/AMD64

- AWS Configuration ::

>aws configure
(enter details from aws account -> security credentials(top right) -> 

C:\Users\UKH>aws s3api create-bucket --bucket athmika2 --region ap-south-1 --create-bucket-configuration LocationConstraint=ap-south-1
http://athmika2.s3.amazonaws.com/

C:\Users\UKH>aws s3 ls
2025-03-29 15:11:41 athmika2

C:\Users\UKH>aws s3api delete-bucket --bucket athmika2 --region ap-south-1

C:\Users\UKH>aws s3 ls

-------------------------------------------------------------
TERRAFORM::

open git bash

- google -> download (https://developer.hashicorp.com/terraform/install?product_intent=terraform) => AMD64
- Terraform : used to create all files in single ______


$ terraform init
Terraform initialized in an empty directory!

The directory has no Terraform configuration files. You may begin working
with Terraform immediately by creating Terraform configuration files.

$ touch athmika.tf

$ terraform init

UKH@Desktop-ATHMIKA MINGW64 ~ (master)
$ terraform validate
Success! The configuration is valid.

> nano athmika.tf => terraform will give code

<paste it>
provider "aws" { region = "ap-south-1" }
resource "aws_s3_bucket" "my_bucket" { bucket = "athmika22" acl = "private" }

ctrl x then y and enter.

provider "aws" { region = "ap-south-1" }
resource "aws_s3_bucket" "my_bucket" {
  bucket = "athmika22"
  acl    = "private"
}
resource "aws_instance" "my_instance" {
  ami           = "ami-0c55b159cbfafe1f0" 
  instance_type = "t2.micro"
  key_name      = "" 

  tags = {
    Name = "MyEC2Instance"
  }
}

--------------------------------------------------------------
2. Block Storage : EBS(elastic block storage)
3. File storage : EFS(elastic file system)

====================================================================================================

DOCKER - uses to break monolathic to microservices. 
-------

- monolatic architecure (having multiple micro services) connected to-> server
------------------------------------------------------

Go to EC2 on website -> 

1. create amazon linux instance => connect
2. sudo su, yum update, yum install docker -y, 
3. docker --version
4. service start docker
5. docker info
6. docker pull ubuntu
    1  yum update
    2  yum install docker -y
    3  docker --version
    4  service docker start
    5  docker images
    6  docker pull ubuntu
    7  docker images
    8  docker ps -a
    9  docker ps
   10  docker run redis =>(ctrl+c)
   11  docker ps -a
   12  docker images
   13  docker run alpine
   14  docker images
   15  docker ps -a
   16  docker ps
   17  docker run -it ubuntu =>(exit)
   18  docker images
   19  docker ps
   20  docker ps -a
   21  docker start hopeful_sammet
   22  docker attach hopeful_sammet
   23  docker ps -a
   24  docker ps
   25  docker ps
   26  history
[root@ip-172-31-31-210 ec2-user]#

===================================================================================================

Download dockerdesktop :

https://docs.docker.com/desktop/setup/install/windows-install/  (1st one = x86_64)

----------------------------------------------------




